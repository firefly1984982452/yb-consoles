import axios from "./https";

function copyArray(array0, array1, clear) {
	if(array0 == null || array1 == null) {
		return;
	}
	if(clear) {
		array0.length = 0;
	}
	for(var i = 0; i < array1.length; i++) {
		array0.push(array1[i]);
	}
};
function makeGroupTree(group) {
	var dict = group.dict;
	var list = group.list;
	var root = group.root;
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var isChild = false;
		if(item.parentNo) {
			var parent = dict[item.parentNo];
			if(parent) {
				if(!parent.children) {
					parent.children = [];
				}
				parent.children.push(item);
				isChild = true;
			}
		}
		if(!isChild) {
			root.push(item);
		}
	}
	group.root = root;
};
function makeTree(list, values) {
	var groups = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		item.__values = values;
		var group = groups[item.itemGroup];
		if(!group) {
			group = {
				root: [],
				list: [],
				dict: {}
			};
			groups[item.itemGroup] = group;
		}
		group.list.push(item);
		group.dict[item.itemNo] = item;
	}
	var results = {};
	for(var key in groups) {
		var group = groups[key];
		makeGroupTree(group);
		results[key] = group.root;
	}
	return results;
};
	function dictionaryChange(e, index, values) {
		if(!e) {
			if(values) {
				values.values['value' + index] = null;
			}
			return;
		}
		var currentValues = e.__values[e.itemGroup];
		currentValues.values['value' + index] = e.itemValue;

		var childIndex = index + 1;
		if(currentValues.items['item' + childIndex] === undefined) {
			return;
		}
		currentValues.items['item' + childIndex] = null;
		currentValues.values['value' + childIndex] = null;
		var childList = currentValues.lists['list' + childIndex];
		if(childList) {
			copyArray(childList, e.children ? e.children : [], true);
		}
		for(var i = childIndex + 1;;i++) {
			if(currentValues.items['item' + i] === undefined) {
				break;
			}
			currentValues.items['item' + i] = null;
			currentValues.values['value' + i] = null;
			currentValues.lists['list' + i].length = 0;
		}
	};
function initDictionary(values) {
	for(var key in values) {
		var data = values[key];
		if(!data) {
			continue;
		}
		var lists = data.lists = {};
		var i = 0;
		for(var kk in data.values) {
			lists['list' + i] = [];
			i++;
		}
	}
};
function makeDictionary(listdata, values) {
	var dict = makeTree(listdata, values);
	for(var key in values) {
		var data = values[key];
		if(!data) {
			continue;
		}
		copyArray(data.lists['list0'], dict[key], false);
	}
	return dict;
};
function setDictionary(dict, values) {
	for(var key in values) {
		var data = values[key];
		if(!data) {
			continue;
		}
		var _values = data.values;
		var _items = data.items;
		var _lists = data.lists;
		var list = dict[key];
		for(var i = 0;;i++) {
			var value = _values['value' + i];
			if(value === undefined) {
				break;
			}
			if(value != null && list != null) {
				var currentItem = null;
				for(var j = 0; j < list.length; j++) {
				var item = list[j];
					if(item.itemValue == value.toString() && item.itemLevel == (i + 1)) {
						currentItem = item;
						break;
					}
				}
				if(currentItem) {
				_items['item' + i] = currentItem;
						list = currentItem.children;
						copyArray(_lists['list' + (i + 1)], list, true);
				}
			}
		}
	}
};
function fetchDictionary(baseUrl, values, callback) {
	var groups = [];
	for(var key in values) {
		groups.push(key);
	}
	var gps = groups.join(',');
	axios.fetch(baseUrl, '/dict/getItemViewsByGroup', { groups: gps })
		.then(function (data) {
			var list = data ? data.data : [];
			if(!list) {
				list = [];
			}
			if(callback) {
				callback(list);
			}
		}).catch(function (error) {
			console.log(error);
			if(callback) {
				callback([]);
			}
		});
};

export default function(values, baseUrl) {
	this.dict = null;
	this.callbackValues = null;

	var that = this;
	initDictionary(values);
	if(!baseUrl) {
		baseUrl = "commonServer";
	}
	fetchDictionary(baseUrl, values, function (list) {
    	that.dict = makeDictionary(list, values);
    	if(that.callbackValues) {
    		setDictionary(that.dict, that.callbackValues);
		}
    	that.callbackValues = null;
	});

	this.onchange = function(e, index, values) {
		dictionaryChange(e, index, values);
	};
	this.setValues = function(values) {
		if(that.dict) {
    		setDictionary(that.dict, values);
		} else {
			that.callbackValues = values;
		}
	};
}

/*
created: function () {
	this.dictUtils = new dictUtils(this.dict);
},
mounted: function () {
	this.dictUtils.setValues(this.dict);
},
data: function() {
	return {
		dict: {
			'设备分类': {
				values: {
					value0: '0',
					value1: '0',
					value2: '7'
				},
				items: {
					item0: null,
					item1: null,
					item2: null
				}
			},
			'设备质保时间': {
				values: {
					value0: '24'
				},
				items: {
					item0: null
				}
			}
		}
	}
}
*/